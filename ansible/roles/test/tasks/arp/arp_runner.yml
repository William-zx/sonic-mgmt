# Test setup
- name: Import all ip addr info from file
  include_vars: "roles/test/tasks/arp/ipaddr_and_route_info.yml"

- block:
  - set_fact:
      case_name: "arp_testcase_1-{{ rif }}"

  - name: Run testcase 1 - Verify dynamic arp learn and remove on interface port
    include: roles/test/tasks/arp/testcase_1.yml

  rescue:
    - name: show arp table
      shell: show arp
      become: yes
      ignore_errors: true

    - name: show interface ip addr
      shell: ip addr show {{ dut_if }}
      become: yes
      ignore_errors: true
    
    - name: show ptf all interfaces ip addr
      shell: ip addr show 
      delegate_to: "{{ ptf_host }}"      
      ignore_errors: true

    - set_fact:
        failed_case: "{{failed_case + [case_name]}}"

  always:  
    - name: Del test IP address on dut if
      shell: config interface ip remove {{ dut_if }} {{ dut_ip_addr_and_mask }}
      ignore_errors: true
      become: yes

    - name: Flush all ip address on host rif
      shell: ip addr flush dev eth{{ dut_if_peer_port }}
      delegate_to: "{{ ptf_host }}"
    
- block:
  - set_fact:
      case_name: "arp_testcase_2-{{ rif }}"

  - name: Run testcase 2 - Verify static arp configed and remove on interface port
    include: roles/test/tasks/arp/testcase_2.yml

  rescue:
    - name: show arp table
      shell: show arp
      become: yes
      ignore_errors: true

    - name: show interface ip addr
      shell: ip addr show {{ dut_if }}
      become: yes
      ignore_errors: true
    
    - name: show ptf all interfaces ip addr
      shell: ip addr show
      delegate_to: "{{ ptf_host }}"      
      ignore_errors: true

    - set_fact:
        failed_case: "{{failed_case + [case_name]}}"

  always:  
    - name: Remove static arp
      shell: ip -s -s neigh del {{ host_ip_addr }} dev {{ dut_if }}
      become: yes   
      ignore_errors: true
      
    - name: Del test IP address on dut if
      shell: config interface ip remove {{ dut_if }} {{ dut_ip_addr_and_mask }}
      ignore_errors: true
      become: yes

    - name: Flush all ip address on host rif
      shell: ip addr flush dev eth{{ dut_if_peer_port }}
      delegate_to: "{{ ptf_host }}"
    
    - name: Del static mac whatever
      shell: bridge fdb del {{ host_mac }} dev {{ dut_if_port }} vlan {{vid}} master
      become: yes
      ignore_errors: true
      when: rif=='vlan'

- block:
  - set_fact:
      case_name: "arp_testcase_3-{{ rif }}"

  - name: Run testcase 3 - Verify add and remove arp entry of route's nexthop
    include: roles/test/tasks/arp/testcase_3.yml

  rescue:
    - name: show arp table
      shell: show arp
      become: yes
      ignore_errors: true

    - name: show ip route
      shell: show ip route {{item}}
      become: yes
      with_items:
        "{{ route_prefix_list }}"
      ignore_errors: true

    - name: show interface ip addr
      shell: ip addr show {{ dut_if }}
      become: yes
      ignore_errors: true
    
    - name: show ptf all interfaces ip addr
      shell: ip addr show
      delegate_to: "{{ ptf_host }}"      
      ignore_errors: true

    - set_fact:
        failed_case: "{{failed_case + [case_name]}}"

  always:  
    - name: Del test IP address to dut if
      shell: config interface ip remove {{ dut_if }} {{ dut_ip_addr_and_mask }}
      ignore_errors: true
      become: yes

    - name: Flush all ip address on host rif
      shell: ip addr flush dev eth{{ dut_if_peer_port }}
      delegate_to: "{{ ptf_host }}"
    
    - name: Del route entry
      shell: vtysh -c "configure terminal" -c "no ip route {{item}} {{host_ip_addr}}"
      with_items:
        "{{ route_prefix_list }}"

- block:
  - set_fact:
      case_name: "arp_testcase_4-{{ rif }}"

  - name: save mac of host if
    shell: ip link show eth{{ dut_if_peer_port }} |  grep -o 'link/ether [^ ]*' | awk '{print $2}'
    delegate_to: "{{ ptf_host }}"
    register: out

  - set_fact:
      origin_mac: "{{out.stdout}}"

  - name: Run testcase 4 - Verify arp mac/port change of route
    include: roles/test/tasks/arp/testcase_4.yml

  rescue:
    - name: show arp table
      shell: show arp
      become: yes
      ignore_errors: true

    - name: show interface ip addr
      shell: ip addr show {{ dut_if }}
      become: yes
      ignore_errors: true
    
    - name: show ptf all interfaces ip addr
      shell: ip addr show
      delegate_to: "{{ ptf_host }}"      
      ignore_errors: true

    - set_fact:
        failed_case: "{{failed_case + [case_name]}}"

  always:  
    - name: Del test IP address on dut if
      shell: config interface ip remove {{ dut_if }} {{ dut_ip_addr_and_mask }}
      ignore_errors: true
      become: yes

    - name: Flush all ip address on host if
      shell: ip addr flush dev eth{{ dut_if_peer_port }}
      delegate_to: "{{ ptf_host }}"

    - name: Flush all ip address on host if 2
      shell: ip addr flush dev eth{{ dut_if_peer_port_2 }}
      delegate_to: "{{ ptf_host }}" 
      when: rif == 'vlan'

    - name: Recover mac of host if 
      shell: ip link set dev eth{{ dut_if_peer_port }} address {{origin_mac}}
      delegate_to: "{{ ptf_host }}"

