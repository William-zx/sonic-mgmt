# Test Case 3    Verify add and remove arp which quote by route

- name: clear arp table
  shell: sonic-clear arp
  become: yes

# Step 1 add arp which quote by route
- name: Generate ip addr configuration
  template: 
    src: "roles/test/tasks/arp/ip_addr.j2"
    dest: "/tmp/ip_addr.json"
  vars:
    op_cmd: "add"
    ip_addrs: "{{ [dut_ip_addr_and_mask] }}"

- name: Apply the ip configuration 1
  vars:
    command_to_run: "config load -y /tmp/ip_addr.json"
    errors_expected: false
  include: roles/test/tasks/run_command_with_log_analyzer.yml

- name: Gernerate facts for ptf
  set_fact:
    dut_ip_addr: "{{ dut_ip_addr_and_mask | ipaddr('address')}}"
    host_ip_addr_and_mask: "{{ dut_ip_addr_and_mask | ipaddr(2) }}"

- set_fact:
    host_ip_addr: "{{host_ip_addr_and_mask.split('/')[0]}}"
    host_ip_mask: "{{host_ip_addr_and_mask.split('/')[1]}}"

# create route entry
- name: Add one static ip route
  shell: vtysh -c "configure terminal" -c "ip route {{item}} {{host_ip_addr}}"
  become: yes
  with_items:
    "{{ route_prefix_list }}"

- name: Add test IP address to host if
  shell: ip addr add {{ host_ip_addr_and_mask }} dev eth{{ dut_if_peer_port }}
  delegate_to: "{{ ptf_host }}"

# ping for tirgger dyanmic arp resolve
- name: Execute ping from host to switch to trigger arp resolve
  shell: ping {{ dut_ip_addr }} -c 3 -i 0.2
  register: pingrc
  failed_when: pingrc.rc != 0
  delegate_to: "{{ ptf_host }}"

# Choose the last lag interface for ip forwarding test with dut inteface.
- name: Choose the last lag interface for ip forwarding test with dut inteface.
  set_fact:
    forwarding_rif: "{{ minigraph_portchannel_interfaces[-1]['attachto'] }}"
    unexpected_ip_addr_list: []

# verify ip traffic can be forwarded via this route
- name: verify ip traffic can be forwarded via this route
  include: roles/test/tasks/ptf_runner.yml
  vars:
        ptf_test_name: ARP Test
        ptf_test_dir: ptftests
        ptf_test_path: arp_test.ArpTest
        ptf_platform_dir: ptftests
        ptf_platform: remote
        ptf_test_params:
          - verbose=True
          - src_port={{ minigraph_port_indices[minigraph_portchannels[forwarding_rif]['members'][0]] }}
          - router_mac=\"{{ ansible_Ethernet0['macaddress'] }}\"
          - dst_ip_addr_list=\"{{ route_prefix_list | ipaddr('address') }}\"
          - dst_port={{ dut_if_peer_port }}
          - unexpected_ip_addr_list=\"{{ unexpected_ip_addr_list }}\"
        ptf_extra_options: "--relax --debug info --log-file /tmp/arp.ArpTest.testcase_3.{{ lookup('pipe','date +%Y-%m-%d-%H:%M:%S') }}.log"

# Step 2 flush the arp
- name: flush arp table
  shell: ip -s -s neigh flush {{host_ip_addr}}
  become: yes
  
# verify arp is flushed
- name: Use shell to show arp on dut_if
  shell: show arp {{host_ip_addr}}
  register: result
  become: true

- fail: msg="arp flush failed."
  when: host_ip_addr in result.stdout and "FAILED" not in result.stdout

# Choose the last lag interface for ip forwarding test with dut inteface.
- name: Generate ptf test params
  set_fact:
    forwarding_rif: "{{ minigraph_portchannel_interfaces[-1]['attachto'] }}"
    unexpected_ip_addr_list: []

# verify ip traffic can be forwarded via this route again
- name: verify ip traffic can be forwarded via this route again
  include: roles/test/tasks/ptf_runner.yml
  vars:
        ptf_test_name: ARP Test
        ptf_test_dir: ptftests
        ptf_test_path: arp_test.ArpTest
        ptf_platform_dir: ptftests
        ptf_platform: remote
        ptf_test_params:
          - verbose=True
          - src_port={{ minigraph_port_indices[minigraph_portchannels[forwarding_rif]['members'][0]] }}
          - router_mac=\"{{ ansible_Ethernet0['macaddress'] }}\"
          - dst_ip_addr_list=\"{{ route_prefix_list | ipaddr('address') }}\"
          - dst_port={{ dut_if_peer_port }}
          - unexpected_ip_addr_list=\"{{ unexpected_ip_addr_list }}\"
        ptf_extra_options: "--relax --debug info --log-file /tmp/arp.ArpTest.testcase_3.{{ lookup('pipe','date +%Y-%m-%d-%H:%M:%S') }}.log"

