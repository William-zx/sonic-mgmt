# Test Case 5   Verify route nexthop change(from exist to not exist)

- set_fact:
    static_route: "{{ static_routes.prefix8 }}"
    nh_interface: "{{ dut_if_vlan }}"
    nh_ip_mask: "{{ minigraph_vlan_interfaces|selectattr('attachto', 'match', dut_if_vlan) | map(attribute='subnet') | ipaddr(2) | first}}"
    nh_interface_peer_port: "{{ dut_if_vlan_peer_port_list[0] }}"
    
- set_fact:
    nh_ip: "{{nh_ip_mask|ipaddr('address')}}"

- name: flush arp/neigh on dut if
  shell: ip link set arp off dev {{ nh_interface }} && ip link set arp on dev {{ nh_interface }}
  become: yes

# Step1 Ping to trigger route nexthop resolve
- name: Add host ip
  shell: ip address add {{ nh_ip_mask }} dev eth{{ nh_interface_peer_port }}
  delegate_to: "{{ ptf_host }}"
  become: yes

- name: Ping from dut to host for trigger arp resolve
  shell: ping {{ nh_ip }} -c 3 -i0.2 -W2
  become: true

# Step2 add route with nexthop exist(with arp entry)
- name: Add static route which nexthop resolved.
  shell: vtysh -c "configure terminal" -c "ip route {{ static_route }} {{ nh_ip }}"
  become: yes  

# Step3 verify route are added success
- name: Use show to verify route is active
  shell: show ip route {{ static_route }}
  register: result
  become: true

- fail: msg="Route {{ static_route }} shoud be found."
  when: '"{{ static_route }}" not in result.stdout'

# Step4  verify ip traffic can be forwarded via this route
- name: Generate ptf test params
  set_fact:
    ingress_rif: "{{ dut_if_4 }}"
    dst_ip_addr_list: "{{ [dst_for_static_route] }}"
    dst_port_list: "{{ [nh_interface_peer_port] }}"
    src_port: "{{ dut_if_4_peer_port }}"

- name: verify ip traffic can be forwarded via this route
  include: roles/test/tasks/ptf_runner.yml
  vars:
        ptf_test_name: Fiball testcase_5 step4
        ptf_test_dir: ptftests
        ptf_test_path: fiball_test.FiballTest
        ptf_platform_dir: ptftests
        ptf_platform: remote
        ptf_test_params:
          - verbose=True
          - src_port={{ src_port }}
          - router_mac=\"{{ ansible_Ethernet0['macaddress'] }}\"
          - dst_ip_addr_list=\"{{ dst_ip_addr_list }}\"
          - dst_port_list=\"{{ dst_port_list }}\"
        ptf_extra_options: "--relax --debug debug --log-file /tmp/fiball.testcase_5.step4.{{ lookup('pipe','date +%Y%m%d_%H%M%S') }}.log"

# Step5 flush the arp entry of nexthop
- name: flush host ip
  shell: ip address flush dev eth{{ nh_interface_peer_port }}
  delegate_to: "{{ ptf_host }}"
  become: yes

- name: flush arp/neigh on dut if
  shell: ip link set arp off dev {{ nh_interface }} && ip link set arp on dev {{ nh_interface }}
  become: yes

- name: ip neigh show
  shell: ip neigh show {{ nh_ip }}
  register: out
  become: true

- fail: msg="{{ nh_ip }} should be flushed"
  when: '"{{ nh_ip }}" in out.stdout and "FAILED" not in out.stdout'

# Step6 verify ip traffic cannot be forwarded via this route
- name: verify ip traffic cannot be forwarded via this route
  include: roles/test/tasks/ptf_runner.yml
  vars:
        ptf_test_name: Fiball testcase_5 step6
        ptf_test_dir: ptftests
        ptf_test_path: fiball_test.FiballTest
        ptf_platform_dir: ptftests
        ptf_platform: remote
        ptf_test_params:
          - verbose=True
          - src_port={{ src_port }}
          - router_mac=\"{{ ansible_Ethernet0['macaddress'] }}\"
          - dst_ip_addr_list=\"{{ dst_ip_addr_list }}\"
          - dst_port_list=\"{{ dst_port_list }}\"
          - unexpected_ip_addr_list=\"{{ dst_ip_addr_list }}\"
        ptf_extra_options: "--relax --debug debug --log-file /tmp/fiball.testcase_5.step6.{{ lookup('pipe','date +%Y%m%d_%H%M%S') }}.log"

